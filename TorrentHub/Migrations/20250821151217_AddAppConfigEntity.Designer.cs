// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TorrentHub.Data;

#nullable disable

namespace TorrentHub.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250821151217_AddAppConfigEntity")]
    partial class AddAppConfigEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TorrentHub.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("TorrentHub.Entities.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Badges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = 2
                        },
                        new
                        {
                            Id = 4,
                            Code = 3
                        });
                });

            modelBuilder.Entity("TorrentHub.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TorrentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TorrentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TorrentHub.Entities.ForumCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ForumCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 0,
                            DisplayOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = 1,
                            DisplayOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = 2,
                            DisplayOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = 3,
                            DisplayOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = 4,
                            DisplayOrder = 5
                        });
                });

            modelBuilder.Entity("TorrentHub.Entities.ForumPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TopicId");

                    b.ToTable("ForumPosts");
                });

            modelBuilder.Entity("TorrentHub.Entities.ForumTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSticky")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastPostTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ForumTopics");
                });

            modelBuilder.Entity("TorrentHub.Entities.Invite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GeneratorUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GeneratorUserId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("TorrentHub.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceiverDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<bool>("SenderDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TorrentHub.Entities.Peers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsSeeder")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastAnnounce")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<int>("TorrentId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TorrentId");

                    b.HasIndex("UserId");

                    b.ToTable("Peers");
                });

            modelBuilder.Entity("TorrentHub.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProcessedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Reason")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ReporterUserId")
                        .HasColumnType("integer");

                    b.Property<int>("TorrentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProcessedByUserId");

                    b.HasIndex("ReporterUserId");

                    b.HasIndex("TorrentId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("TorrentHub.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BountyAmount")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("FilledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("FilledByUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("FilledWithTorrentId")
                        .HasColumnType("integer");

                    b.Property<int>("RequestedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("FilledByUserId");

                    b.HasIndex("FilledWithTorrentId");

                    b.HasIndex("RequestedByUserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("TorrentHub.Entities.SiteSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Key");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("TorrentHub.Entities.StoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BadgeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemCode")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.ToTable("StoreItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAvailable = true,
                            ItemCode = 0,
                            Price = 1000m
                        },
                        new
                        {
                            Id = 2,
                            IsAvailable = true,
                            ItemCode = 1,
                            Price = 4500m
                        },
                        new
                        {
                            Id = 3,
                            IsAvailable = true,
                            ItemCode = 2,
                            Price = 5000m
                        },
                        new
                        {
                            Id = 4,
                            IsAvailable = true,
                            ItemCode = 3,
                            Price = 20000m
                        },
                        new
                        {
                            Id = 5,
                            IsAvailable = true,
                            ItemCode = 4,
                            Price = 10000m
                        },
                        new
                        {
                            Id = 6,
                            IsAvailable = true,
                            ItemCode = 5,
                            Price = 15000m
                        },
                        new
                        {
                            Id = 7,
                            BadgeId = 4,
                            IsAvailable = true,
                            ItemCode = 6,
                            Price = 25000m
                        });
                });

            modelBuilder.Entity("TorrentHub.Entities.Torrent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Cast")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<string>("Directors")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("FreeUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Genres")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("InfoHash")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<int>("Leechers")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OriginalTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int?>("Runtime")
                        .HasColumnType("integer");

                    b.Property<int>("Seeders")
                        .HasColumnType("integer");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<int>("Snatched")
                        .HasColumnType("integer");

                    b.Property<int>("StickyStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("TMDbId")
                        .HasColumnType("integer");

                    b.Property<string>("Tagline")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<int>("UploadedByUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InfoHash")
                        .IsUnique();

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("Torrents");
                });

            modelBuilder.Entity("TorrentHub.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<int?>("BanReason")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BanUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Coins")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DoubleUploadExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DownloadedBytes")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("InviteId")
                        .HasColumnType("uuid");

                    b.Property<long>("InviteNum")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDoubleUploadActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNoHRActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("NoHRExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("NominalDownloadedBytes")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("NominalUploadedBytes")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Passkey")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("RssKey")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("Signature")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("TotalLeechingTimeMinutes")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("TotalSeedingTimeMinutes")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UploadedBytes")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("InviteId")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TorrentHub.Entities.UserBadge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BadgeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BadgeId");

                    b.HasIndex("UserId", "BadgeId")
                        .IsUnique();

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("TorrentHub.Entities.UserDailyStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentBonusesGiven")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Date")
                        .IsUnique();

                    b.ToTable("UserDailyStats");
                });

            modelBuilder.Entity("TorrentHub.Entities.Announcement", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("TorrentHub.Entities.Comment", b =>
                {
                    b.HasOne("TorrentHub.Entities.Torrent", "Torrent")
                        .WithMany()
                        .HasForeignKey("TorrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorrentHub.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Torrent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorrentHub.Entities.ForumPost", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorrentHub.Entities.ForumTopic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("TorrentHub.Entities.ForumTopic", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TorrentHub.Entities.ForumCategory", "Category")
                        .WithMany("Topics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TorrentHub.Entities.Invite", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "GeneratorUser")
                        .WithMany("GeneratedInvites")
                        .HasForeignKey("GeneratorUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GeneratorUser");
                });

            modelBuilder.Entity("TorrentHub.Entities.Message", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorrentHub.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TorrentHub.Entities.Peers", b =>
                {
                    b.HasOne("TorrentHub.Entities.Torrent", "Torrent")
                        .WithMany()
                        .HasForeignKey("TorrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorrentHub.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Torrent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorrentHub.Entities.Report", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId");

                    b.HasOne("TorrentHub.Entities.User", "ReporterUser")
                        .WithMany()
                        .HasForeignKey("ReporterUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorrentHub.Entities.Torrent", "Torrent")
                        .WithMany()
                        .HasForeignKey("TorrentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessedByUser");

                    b.Navigation("ReporterUser");

                    b.Navigation("Torrent");
                });

            modelBuilder.Entity("TorrentHub.Entities.Request", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "FilledByUser")
                        .WithMany()
                        .HasForeignKey("FilledByUserId");

                    b.HasOne("TorrentHub.Entities.Torrent", "FilledWithTorrent")
                        .WithMany()
                        .HasForeignKey("FilledWithTorrentId");

                    b.HasOne("TorrentHub.Entities.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilledByUser");

                    b.Navigation("FilledWithTorrent");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("TorrentHub.Entities.StoreItem", b =>
                {
                    b.HasOne("TorrentHub.Entities.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId");

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("TorrentHub.Entities.Torrent", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "UploadedByUser")
                        .WithMany("Torrents")
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UploadedByUser");
                });

            modelBuilder.Entity("TorrentHub.Entities.User", b =>
                {
                    b.HasOne("TorrentHub.Entities.Invite", "Invite")
                        .WithOne("UsedByUser")
                        .HasForeignKey("TorrentHub.Entities.User", "InviteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Invite");
                });

            modelBuilder.Entity("TorrentHub.Entities.UserBadge", b =>
                {
                    b.HasOne("TorrentHub.Entities.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TorrentHub.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorrentHub.Entities.UserDailyStats", b =>
                {
                    b.HasOne("TorrentHub.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TorrentHub.Entities.ForumCategory", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("TorrentHub.Entities.ForumTopic", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("TorrentHub.Entities.Invite", b =>
                {
                    b.Navigation("UsedByUser");
                });

            modelBuilder.Entity("TorrentHub.Entities.User", b =>
                {
                    b.Navigation("GeneratedInvites");

                    b.Navigation("Torrents");
                });
#pragma warning restore 612, 618
        }
    }
}
